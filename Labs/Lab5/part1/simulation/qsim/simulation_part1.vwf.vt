// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2015 20:43:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    part1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part1_vlg_sample_tst(
	D,
	clock,
	sampler_tx
);
input  D;
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(D or clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module part1_vlg_check_tst (
	notq_a,
	notq_b,
	notq_c,
	q_a,
	q_b,
	q_c,
	sampler_rx
);
input  notq_a;
input  notq_b;
input  notq_c;
input  q_a;
input  q_b;
input  q_c;
input sampler_rx;

reg  notq_a_expected;
reg  notq_b_expected;
reg  notq_c_expected;
reg  q_a_expected;
reg  q_b_expected;
reg  q_c_expected;

reg  notq_a_prev;
reg  notq_b_prev;
reg  notq_c_prev;
reg  q_a_prev;
reg  q_b_prev;
reg  q_c_prev;

reg  notq_a_expected_prev;
reg  notq_b_expected_prev;
reg  notq_c_expected_prev;
reg  q_a_expected_prev;
reg  q_b_expected_prev;
reg  q_c_expected_prev;

reg  last_notq_a_exp;
reg  last_notq_b_exp;
reg  last_notq_c_exp;
reg  last_q_a_exp;
reg  last_q_b_exp;
reg  last_q_c_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	notq_a_prev = notq_a;
	notq_b_prev = notq_b;
	notq_c_prev = notq_c;
	q_a_prev = q_a;
	q_b_prev = q_b;
	q_c_prev = q_c;
end

// update expected /o prevs

always @(trigger)
begin
	notq_a_expected_prev = notq_a_expected;
	notq_b_expected_prev = notq_b_expected;
	notq_c_expected_prev = notq_c_expected;
	q_a_expected_prev = q_a_expected;
	q_b_expected_prev = q_b_expected;
	q_c_expected_prev = q_c_expected;
end



// expected notq_a
initial
begin
	notq_a_expected = 1'bX;
end 

// expected notq_b
initial
begin
	notq_b_expected = 1'bX;
end 

// expected notq_c
initial
begin
	notq_c_expected = 1'bX;
end 

// expected q_a
initial
begin
	q_a_expected = 1'bX;
end 

// expected q_b
initial
begin
	q_b_expected = 1'bX;
end 

// expected q_c
initial
begin
	q_c_expected = 1'bX;
end 
// generate trigger
always @(notq_a_expected or notq_a or notq_b_expected or notq_b or notq_c_expected or notq_c or q_a_expected or q_a or q_b_expected or q_b or q_c_expected or q_c)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected notq_a = %b | expected notq_b = %b | expected notq_c = %b | expected q_a = %b | expected q_b = %b | expected q_c = %b | ",notq_a_expected_prev,notq_b_expected_prev,notq_c_expected_prev,q_a_expected_prev,q_b_expected_prev,q_c_expected_prev);
	$display("| real notq_a = %b | real notq_b = %b | real notq_c = %b | real q_a = %b | real q_b = %b | real q_c = %b | ",notq_a_prev,notq_b_prev,notq_c_prev,q_a_prev,q_b_prev,q_c_prev);
`endif
	if (
		( notq_a_expected_prev !== 1'bx ) && ( notq_a_prev !== notq_a_expected_prev )
		&& ((notq_a_expected_prev !== last_notq_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port notq_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", notq_a_expected_prev);
		$display ("     Real value = %b", notq_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_notq_a_exp = notq_a_expected_prev;
	end
	if (
		( notq_b_expected_prev !== 1'bx ) && ( notq_b_prev !== notq_b_expected_prev )
		&& ((notq_b_expected_prev !== last_notq_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port notq_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", notq_b_expected_prev);
		$display ("     Real value = %b", notq_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_notq_b_exp = notq_b_expected_prev;
	end
	if (
		( notq_c_expected_prev !== 1'bx ) && ( notq_c_prev !== notq_c_expected_prev )
		&& ((notq_c_expected_prev !== last_notq_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port notq_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", notq_c_expected_prev);
		$display ("     Real value = %b", notq_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_notq_c_exp = notq_c_expected_prev;
	end
	if (
		( q_a_expected_prev !== 1'bx ) && ( q_a_prev !== q_a_expected_prev )
		&& ((q_a_expected_prev !== last_q_a_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_a_expected_prev);
		$display ("     Real value = %b", q_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_a_exp = q_a_expected_prev;
	end
	if (
		( q_b_expected_prev !== 1'bx ) && ( q_b_prev !== q_b_expected_prev )
		&& ((q_b_expected_prev !== last_q_b_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_b_expected_prev);
		$display ("     Real value = %b", q_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_b_exp = q_b_expected_prev;
	end
	if (
		( q_c_expected_prev !== 1'bx ) && ( q_c_prev !== q_c_expected_prev )
		&& ((q_c_expected_prev !== last_q_c_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_c_expected_prev);
		$display ("     Real value = %b", q_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_q_c_exp = q_c_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module part1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg D;
reg clock;
// wires                                               
wire notq_a;
wire notq_b;
wire notq_c;
wire q_a;
wire q_b;
wire q_c;

wire sampler;                             

// assign statements (if any)                          
part1 i1 (
// port map - connection between master ports and signals/registers   
	.D(D),
	.clock(clock),
	.notq_a(notq_a),
	.notq_b(notq_b),
	.notq_c(notq_c),
	.q_a(q_a),
	.q_b(q_b),
	.q_c(q_c)
);

// D
initial
begin
	D = 1'b0;
	D = #100000 1'b1;
	D = #100000 1'b0;
	D = #80000 1'b1;
	D = #60000 1'b0;
	D = #80000 1'b1;
	D = #40000 1'b0;
	D = #60000 1'b1;
	D = #60000 1'b0;
	D = #80000 1'b1;
	D = #60000 1'b0;
	D = #60000 1'b1;
	D = #200000 1'b0;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #160000 1'b1;
	clock = #240000 1'b0;
	clock = #240000 1'b1;
	clock = #240000 1'b0;
end 

part1_vlg_sample_tst tb_sample (
	.D(D),
	.clock(clock),
	.sampler_tx(sampler)
);

part1_vlg_check_tst tb_out(
	.notq_a(notq_a),
	.notq_b(notq_b),
	.notq_c(notq_c),
	.q_a(q_a),
	.q_b(q_b),
	.q_c(q_c),
	.sampler_rx(sampler)
);
endmodule

