
//SRVB/Homes$/zhan1261/Desktop/Haowei/Lab9-10/part3/part3_templates/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea000038 	b	ec <SERVICE_UND>
   8:	ea000038 	b	f0 <SERVICE_SVC>
   c:	ea000039 	b	f8 <SERVICE_ABT_INST>
  10:	ea000037 	b	f4 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000026 	b	b8 <SERVICE_IRQ>
  1c:	ea000036 	b	fc <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
 * Both the timer and KEYs are handled via interrupts
*/
			.text
			.global	_start
_start:
			MOV R0, #0b10010	//Initialize IRQ Stack Pointer
  40:	e3a00012 	mov	r0, #18
			MSR CPSR, R0		//Switch to IRQ mode
  44:	e129f000 	msr	CPSR_fc, r0
			LDR SP, =0xFFFFFFFC
  48:	e3e0d003 	mvn	sp, #3
			MOV R0, #0b10011	//Initialize SVC Stack Pointer
  4c:	e3a00013 	mov	r0, #19
			MSR CPSR, R0		//Switch to SVC mode
  50:	e129f000 	msr	CPSR_fc, r0
			LDR SP, =0x3FFFFFFC
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

			BL			CONFIG_GIC				// configure the ARM generic interrupt controller
  58:	eb000028 	bl	100 <CONFIG_GIC>
			BL			CONFIG_PRIV_TIMER		// configure the MPCore private timer
  5c:	eb000005 	bl	78 <CONFIG_PRIV_TIMER>
			BL			CONFIG_KEYS				// configure the pushbutton KEYs
  60:	eb00000a 	bl	90 <CONFIG_KEYS>
			
			MSR			CPSR, #0b00010011	// configure CPU interrupt
  64:	e329f013 	msr	CPSR_fc, #19

			LDR		R6, =0xFF200000 		// red LED base address
  68:	e59f6038 	ldr	r6, [pc, #56]	; a8 <LEDR_PATTERN+0x4>

0000006c <MAIN>:
MAIN:
			LDR		R4, LEDR_PATTERN		// LEDR pattern; modified by timer ISR
  6c:	e59f4030 	ldr	r4, [pc, #48]	; a4 <LEDR_PATTERN>
			STR 		R4, [R6] 				// write to red LEDs
  70:	e5864000 	str	r4, [r6]
			B 			MAIN
  74:	eafffffc 	b	6c <MAIN>

00000078 <CONFIG_PRIV_TIMER>:

/* Configure the MPCore private timer to create interrupts every 1/10 second */
CONFIG_PRIV_TIMER:
			LDR		R0, =0xFFFEC600 		// Timer base address
  78:	e59f002c 	ldr	r0, [pc, #44]	; ac <LEDR_PATTERN+0x8>
			LDR		R1, =20000000
  7c:	e59f102c 	ldr	r1, [pc, #44]	; b0 <LEDR_PATTERN+0xc>
			STR 	R1, [R0]
  80:	e5801000 	str	r1, [r0]
			LDR		R2, =0b111
  84:	e3a02007 	mov	r2, #7
			STR		R2, [R0, #8]
  88:	e5802008 	str	r2, [r0, #8]
			MOV 		PC, LR 					// return
  8c:	e1a0f00e 	mov	pc, lr

00000090 <CONFIG_KEYS>:

/* Configure the KEYS to generate an interrupt */
CONFIG_KEYS:
			LDR 		R0, =0xFF200050 		// KEYs base address
  90:	e59f001c 	ldr	r0, [pc, #28]	; b4 <LEDR_PATTERN+0x10>
			LDR			R3, =0b1111
  94:	e3a0300f 	mov	r3, #15
			STR			R3, [R0, #8]
  98:	e5803008 	str	r3, [r0, #8]
			MOV 		PC, LR 					// return
  9c:	e1a0f00e 	mov	pc, lr

000000a0 <LEDR_DIRECTION>:
  a0:	00000000 	.word	0x00000000

000000a4 <LEDR_PATTERN>:
  a4:	00000001 	.word	0x00000001
  a8:	ff200000 	.word	0xff200000
  ac:	fffec600 	.word	0xfffec600
  b0:	01312d00 	.word	0x01312d00
  b4:	ff200050 	.word	0xff200050

000000b8 <SERVICE_IRQ>:
  b8:	e92d403f 	push	{r0, r1, r2, r3, r4, r5, lr}
  bc:	e59f40c0 	ldr	r4, [pc, #192]	; 184 <ICDICER+0x4>
  c0:	e594500c 	ldr	r5, [r4, #12]

000000c4 <PRIV_TIMER_CHECK>:
  c4:	e355001d 	cmp	r5, #29
  c8:	1a000001 	bne	d4 <KEYS_CHECK>
  cc:	eb00003d 	bl	1c8 <PRIV_TIMER_ISR>
  d0:	ea000002 	b	e0 <EXIT_IRQ>

000000d4 <KEYS_CHECK>:
  d4:	e3550049 	cmp	r5, #73	; 0x49

000000d8 <UNEXPECTED>:
  d8:	1afffffe 	bne	d8 <UNEXPECTED>
  dc:	eb00002d 	bl	198 <KEY_ISR>

000000e0 <EXIT_IRQ>:
  e0:	e5845010 	str	r5, [r4, #16]
  e4:	e8bd403f 	pop	{r0, r1, r2, r3, r4, r5, lr}
  e8:	e25ef004 	subs	pc, lr, #4

000000ec <SERVICE_UND>:
  ec:	eafffffe 	b	ec <SERVICE_UND>

000000f0 <SERVICE_SVC>:
  f0:	eafffffe 	b	f0 <SERVICE_SVC>

000000f4 <SERVICE_ABT_DATA>:
  f4:	eafffffe 	b	f4 <SERVICE_ABT_DATA>

000000f8 <SERVICE_ABT_INST>:
  f8:	eafffffe 	b	f8 <SERVICE_ABT_INST>

000000fc <SERVICE_FIQ>:
  fc:	eafffffe 	b	fc <SERVICE_FIQ>

00000100 <CONFIG_GIC>:
 100:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 104:	e3a0001d 	mov	r0, #29
 108:	e3a01001 	mov	r1, #1
 10c:	eb00000a 	bl	13c <CONFIG_INTERRUPT>
 110:	e3a00049 	mov	r0, #73	; 0x49
 114:	e3a01001 	mov	r1, #1
 118:	eb000007 	bl	13c <CONFIG_INTERRUPT>
 11c:	e59f0060 	ldr	r0, [pc, #96]	; 184 <ICDICER+0x4>
 120:	e59f1060 	ldr	r1, [pc, #96]	; 188 <ICDICER+0x8>
 124:	e5801004 	str	r1, [r0, #4]
 128:	e3a01001 	mov	r1, #1
 12c:	e5801000 	str	r1, [r0]
 130:	e59f0054 	ldr	r0, [pc, #84]	; 18c <ICDICER+0xc>
 134:	e5801000 	str	r1, [r0]
 138:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000013c <CONFIG_INTERRUPT>:
 13c:	e92d4030 	push	{r4, r5, lr}
 140:	e1a041a0 	lsr	r4, r0, #3
 144:	e3c44003 	bic	r4, r4, #3
 148:	e59f2040 	ldr	r2, [pc, #64]	; 190 <ICDICER+0x10>
 14c:	e0824004 	add	r4, r2, r4
 150:	e200201f 	and	r2, r0, #31
 154:	e3a05001 	mov	r5, #1
 158:	e1a02215 	lsl	r2, r5, r2
 15c:	e5943000 	ldr	r3, [r4]
 160:	e1833002 	orr	r3, r3, r2
 164:	e5843000 	str	r3, [r4]
 168:	e3c04003 	bic	r4, r0, #3
 16c:	e59f2020 	ldr	r2, [pc, #32]	; 194 <ICDICER+0x14>
 170:	e0824004 	add	r4, r2, r4
 174:	e2002003 	and	r2, r0, #3
 178:	e0824004 	add	r4, r2, r4
 17c:	e5c41000 	strb	r1, [r4]
 180:	e8bd8030 	pop	{r4, r5, pc}
 184:	fffec100 	.word	0xfffec100
 188:	0000ffff 	.word	0x0000ffff
 18c:	fffed000 	.word	0xfffed000
 190:	fffed100 	.word	0xfffed100
 194:	fffed800 	.word	0xfffed800

00000198 <KEY_ISR>:
 *                                                                          
 * This routine checks which KEY has been pressed.  If KEY3 it stops/starts the timer.
****************************************************************************************/
					.include "address_map_arm.s"
					.global	KEY_ISR
KEY_ISR: 		LDR		R0, =KEY_BASE			// base address of KEYs parallel port
 198:	e59f0020 	ldr	r0, [pc, #32]	; 1c0 <END_KEY_ISR+0x4>
					LDR		R1, [R0, #0xC]			// read edge capture register
 19c:	e590100c 	ldr	r1, [r0, #12]
					STR		R1, [R0, #0xC]			// clear the interrupt
 1a0:	e580100c 	str	r1, [r0, #12]

000001a4 <CHK_KEY3>:

CHK_KEY3:		TST	R1, #0b1000
 1a4:	e3110008 	tst	r1, #8
				BEQ END_KEY_ISR
 1a8:	0a000003 	beq	1bc <END_KEY_ISR>

000001ac <START_STOP>:
								
START_STOP:		LDR		R0, =MPCORE_PRIV_TIMER		// timer base address
 1ac:	e59f0010 	ldr	r0, [pc, #16]	; 1c4 <END_KEY_ISR+0x8>
				LDR		R1, [R0, #0x8]			// read timer control register
 1b0:	e5901008 	ldr	r1, [r0, #8]
				EOR 	R1, R1, #1
 1b4:	e2211001 	eor	r1, r1, #1
				STR 	R1, [R0, #0x8]
 1b8:	e5801008 	str	r1, [r0, #8]

000001bc <END_KEY_ISR>:

END_KEY_ISR:	MOV	PC, LR
 1bc:	e1a0f00e 	mov	pc, lr
 1c0:	ff200050 	.word	0xff200050
 1c4:	fffec600 	.word	0xfffec600

000001c8 <PRIV_TIMER_ISR>:
 * Shifts the pattern being displayed on the LEDR
 * 
******************************************************************************/
				.global PRIV_TIMER_ISR
PRIV_TIMER_ISR:	
				LDR		R0, =MPCORE_PRIV_TIMER	// base address of timer
 1c8:	e59f0050 	ldr	r0, [pc, #80]	; 220 <END_TIMER_ISR+0x4>
				MOV		R1, #1
 1cc:	e3a01001 	mov	r1, #1
				STR		R1, [R0, #0xC]				// write 1 to F bit to reset it
 1d0:	e580100c 	str	r1, [r0, #12]

000001d4 <SWEEP>:
															// and clear the interrupt

/* Rotate the LEDR bits either to the left or right. Reverses direction when hitting 
	position 9 on the left, or position 0 on the right */
SWEEP:			LDR		R0, =LEDR_DIRECTION		// put shifting direction into R2
 1d4:	e59f0048 	ldr	r0, [pc, #72]	; 224 <END_TIMER_ISR+0x8>
				LDR		R2, [R0]
 1d8:	e5902000 	ldr	r2, [r0]
				LDR		R1, =LEDR_PATTERN		// put LEDR pattern into R3
 1dc:	e59f1044 	ldr	r1, [pc, #68]	; 228 <END_TIMER_ISR+0xc>
				LDR		R3, [R1]
 1e0:	e5913000 	ldr	r3, [r1]
				CMP 	R2, #0
 1e4:	e3520000 	cmp	r2, #0
				BNE		SHIFTR
 1e8:	1a000004 	bne	200 <SHIFTR>

000001ec <SHIFTL>:

SHIFTL:			LSL		R3, R3, #1
 1ec:	e1a03083 	lsl	r3, r3, #1
				CMP		R3, #0b1000000000
 1f0:	e3530c02 	cmp	r3, #512	; 0x200
				BNE		DONE_SWEEP
 1f4:	1a000006 	bne	214 <DONE_SWEEP>

000001f8 <L_R>:

L_R:			MOV		R2, #1					// change direction to right
 1f8:	e3a02001 	mov	r2, #1
				B		DONE_SWEEP
 1fc:	ea000004 	b	214 <DONE_SWEEP>

00000200 <SHIFTR>:

SHIFTR:			LSR		R3, R3, #1
 200:	e1a030a3 	lsr	r3, r3, #1
				CMP		R3, #0b0000000001
 204:	e3530001 	cmp	r3, #1
				BNE		DONE_SWEEP
 208:	1a000001 	bne	214 <DONE_SWEEP>

0000020c <R_L>:

R_L:			MOV		R2, #0					// change direction to left
 20c:	e3a02000 	mov	r2, #0
				B		DONE_SWEEP
 210:	eaffffff 	b	214 <DONE_SWEEP>

00000214 <DONE_SWEEP>:

DONE_SWEEP:
				STR		R2, [R0]					// put shifting direction back into memory
 214:	e5802000 	str	r2, [r0]
				STR		R3, [R1]					// put LEDR pattern back onto stack
 218:	e5813000 	str	r3, [r1]

0000021c <END_TIMER_ISR>:
	
END_TIMER_ISR:
				MOV		PC, LR
 21c:	e1a0f00e 	mov	pc, lr
 220:	fffec600 	.word	0xfffec600
 224:	000000a0 	.word	0x000000a0
 228:	000000a4 	.word	0x000000a4
